workspace:
  directory: ThinkDataStructures/book
  tex: book.tex
refs:
  chapter_counter_from: 0
metadata:
  suppressPageNumbering: true
assets:
  - figs: "*.png"
  - figs: "*.jpg"
sections:
  - name: Preface
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The philosophy behind the book
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Prerequisites
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Working with the code
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Contributors
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 1
  - name: Interfaces
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Why are there two kinds of \java{List}?
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Interfaces in Java
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The List interface
    type: section
    transformations:
        - remove: 21
          position: 650
        - add:  |
             See the contrived example that demonstrates the point in the panel to the left.
             [Open Visualizer](open_tutor code/ListClientExample.java panel=0)
    
          position: 674
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/ListClientExample.java"
          panel: 0
          action: open
  - name: Exercise 1
    type: section
    transformations:
        - remove: 39
          position: 728
        - add:  |
             If you look in the two tabs to the left, you'll find the source code for this exercise:
  
          position: 767
        - remove: 18
          position: 780
        - add:  |
             Review `ListClientExample` and make sure you understand what it does. Then compile and run it by pressing the button below:
             {Run!}(sh .guides/bg.sh javac code/ListClientExample.java java -cp code/ ListClientExample )
  
          position: 800
        - add:  |
             {Run Test|assessment}(test-958272319)
  
          position: 806
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/ListClientExampleTest.java"
          panel: 0
          action: open
        - path: "code/ListClientExample.java"
          panel: 0
          action: open
# Chapter 2
  - name: Analysis of Algorithms
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Selection sort
    type: section
    transformations:
        - remove: 42
          position: 935
        - add:  |
             For example, see the implementation of a simple algorithm called **selection sort** (see http://thinkdast.com/selectsort) in the panel to the left.
             
             [Highlight swapElements](open_file code/SelectionSort.java panel=0 ref="public static void swapElements" count=5)
 
          position: 934
        - add:  |
             [Highlight indexLowest](open_file code/SelectionSort.java panel=0 ref="public static int indexLowest" count=9)
 
          position: 988
        - add:  |

             [Highlight selectionSort](open_file code/SelectionSort.java panel=0 ref="public static void selectionSort" count=6)
 
          position: 1008
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/SelectionSort.java"
          panel: 0
          action: open
  - name: Big O notation
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 2
    type: section
    transformations:
        - remove: 2
          position: 1098
        - add:  |
             If you look in the two tabs to the left, you'll find the source files you need:
  
          position: 1100
        - remove: 4
          position: 1113
        - add:  |
             {Run Test|assessment}(test-1977323988)
  
          position: 1124
        - remove: 19
          position: 1125
        - add:  |
              Before you start filling in the missing methods, let's walk through
              some of the code. Find the class definition, instance variables,
              and constructor. [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public class MyArrayList" count=14)
   
          position: 1144
        - add:  |
              [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public boolean add" count=11)
     
          position: 1170
        - remove: 13
          position: 1171
        - add:  |
              [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public T get" count=6)
    
          position: 1205
        - remove: 8
          position: 1206
        - remove: 9
          position: 1223
        - add:  |
                In `MyArrayList.java`, you'll find a stub for `set`.
                [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public T set" count=4)
 
          position: 1232
        - add:  |
                [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public int indexOf" count=4)
 
          position: 1246
        - add:  |
             {Run Test|assessment}(test-1977323988)
  
          position: 1262
        - add:  |
                [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public void add" count=3)
 
          position: 1267
        - add:  |
                [Highlight Code](open_file code/MyArrayList.java panel=0 ref="public T remove" count=4)
 
          position: 1278
        - remove: 2
          position: 1281
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyArrayListTest.java"
          panel: 0
          action: open
        - path: "code/MyArrayList.java"
          panel: 0
          action: open
# Chapter 3
  - name: ArrayList
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Classifying MyArrayList methods
    type: section
    transformations:
        - add:  |
             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public T get" count=6)
  
          position: 1312
        - add:  |
             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public T set" count=5)
  
          position: 1330
        - add:  |
             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public int indexOf" count=8)
  
          position: 1357
        - add:  |
             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="private boolean equals" count=7)
  
          position: 1370
        - add:  |
             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public T remove" count=8)
  
          position: 1404
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyArrayList.java"
          panel: 0
          action: open
  - name: Classifying add
    type: section
    transformations:
        - add:  |

             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public void add" count=14)
  
          position: 1436
        - add:  |

             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public boolean add" count=11)
  
          position: 1460
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyArrayList.java"
          panel: 0
          action: open
  - name: Problem Size
    type: section
    transformations:
        - add:  |
             [Highlight in Code](open_file code/MyArrayList.java panel=0 ref="public boolean removeAll" count=7)
  
          position: 1584
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyArrayList.java"
          panel: 0
          action: open
  - name: Linked Data Structures
    type: section
    transformations:
        - remove: 28
          position: 1636
        - add: |
              See the ListNode.java file in the top-left pane for a class definition for a simple node.
  
          position: 1664
        - add:  |
             [Highlight in Code](open_file code/ListNode.java panel=0 ref="public Object data" count=2)
  
          position: 1669
        - add:  |
             [Highlight in Code](open_file code/ListNode.java panel=0 ref="//constructors" count=15)
  
          position: 1675
        - add:  |
             [Highlight in Code](open_file code/LinkedListExample.java panel=1 ref="ListNode node1" count=3)
  
          position: 1688
        - add:  |
             [Highlight in Code](open_file code/LinkedListExample.java panel=1 ref="node1.next" count=3)
  
          position: 1696
        - add:  |
             [Highlight in Code](open_file code/LinkedListExample.java panel=1 ref="ListNode node0" count=1)
  
          position: 1704
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/ListNode.java"
          panel: 0
          action: open
        - path: "code/LinkedListExample.java"
          panel: 1
          action: open
  - name: Exercise 3
    type: section
    transformations:
        - remove: 2
          position: 1731
        - add: In the panes to the right, you’ll find the source files you need for this exercise
          position: 1730
        - add:  |
              {Run Test|assessment}(test-187817179)
    
          position: 1745
        - remove: 4
          position: 1746
        - add:  |
              Before you start, let's walk through some of the code. Find the instance variables and constructor for `MyLinkedList.java` in the top-left panel. [Highlight Code](open_file code/MyLinkedList.java panel=1 ref="private int size" count=10)
 
          position: 1753
        - remove: 16
          position: 1754
        - add:  |
              [Highlight Code](open_file code/MyLinkedList.java panel=1 ref="private class Node" count=8)
 
          position: 1808
        - remove: 11
          position: 1809
        - add:  |
               [Highlight Code](open_file code/MyLinkedList.java panel=1 ref="public boolean add" count=12)
   
          position: 1827
        - remove: 14
          position: 1828
        - add:  |
               [Highlight Code](open_file code/MyLinkedList.java panel=1 ref="public int indexOf" count=4)
   
          position: 1868
        - add:  |
              {Run Test|assessment}(test-187817179)
    
          position: 1879
        - add:  |
               [Highlight Code](open_file code/MyLinkedList.java panel=1 ref="public void add" count=3)
   
          position: 1886
        - add:  |
               [Highlight Code](open_file code/MyLinkedList.java panel=1 ref="public E remove" count=4)
   
          position: 1892
        - remove: 2
          position: 1893
    configuration:
      layout: 3-cell-left
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyLinkedList.java"
          panel: 1
          action: open
        - path: "code/MyLinkedListTest.java"
          panel: 2
          action: open
  - name: A note on garbage collection
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 4
  - name: LinkedList
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Classifying \java{MyLinkedList} methods
    type: section
    transformations:
        - add:  |
             [Highlight in Code](open_file code/MyLinkedList.java panel=0 ref="public int indexOf" count=10)
  
          position: 1970
        - add:  |
             [Highlight in Code](open_file code/MyLinkedList.java panel=0 ref="public void add" count=9)
  
          position: 2024
        - add:  |
             [Highlight in Code](open_file code/MyLinkedList.java panel=0 ref="private Node getNode" count=10)
  
          position: 2044
        - add:  |
             [Highlight in Code](open_file code/MyLinkedList.java panel=0 ref="public E remove" count=11)
  
          position: 2091
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyLinkedList.java"
          panel: 0
          action: open
  - name: Comparing \java{MyArrayList} and \java{MyLinkedList}
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Profiling
    type: section
    transformations:
       - add:  |
             [Highlight in Code](open_file code/ProfileListAdd.java panel=2 ref="public static void profileArrayListAddEnd" count=17)
     
         position: 2183
       - remove: 25
         position: 2184
        
       - remove: 2
         position: 2265
       - add: |
          Run the code for yourself using the button below and compare it to the output I got.
          {Run! | terminal}(cd code && javac Profiler.java ProfileListAdd.java && java -cp lib/*:. ProfileListAdd && cd ../ )
      
         position: 2267
    configuration:
      layout: 4-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Profiler.java"
          panel: 0
          action: open
        - path: "code/ProfileListAdd.java"
          panel: 2
          action: open
        - path: "#preview: https://{{domain3000}}/"
          panel: 3
          action: open
  - name: Interpreting results
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 4
    type: section
    transformations:
        - add:  |
            In the panes to the left, you'll find the source files you need for this exercise:


            1.  `Profiler.java` contains the implementation of the `Profiler` class described above. You will use this class, but you don't have to know how it works. But feel free to read the source.
            1.  `ProfileListAdd.java` contains starter code for this exercise, including the example, above, which profiles `ArrayList.add`. You will modify this file to profile a few other methods. 

            {Run! | terminal}(cd code && javac Profiler.java ProfileListAdd.java && java -cp lib/*:. ProfileListAdd && cd ../ )


            Use the button above to run `ProfileListAdd.java`. You should get results similar to Figure 4.1, but you might have to adjust `startN` or `endMillis`. The estimated slope should be close to 1, indicating that performing $n$ add operations takes time proportional to $n$ raised to the exponent 1; that is, it is in $O(n)$. 


            In `ProfileListAdd.java`, you'll find an empty method named `profileArrayListAddBeginning`. [(Highlight)](open_file code/ProfileListAdd.java panel=2 ref="public static void profileArrayListAddBeginning" count=1) Fill in the body of this method with code that tests `ArrayList.add`, always putting the new element at the beginning. If you start with a copy of `profileArrayListAddEnd`, you should only have to make a few changes. Add a line in `main` to invoke this method. 


            To stop the current process, close the window with the graph in the bottom-right panel. Run the program again using the same button above and interpret the results. 


            Based on our understanding of how `ArrayList` works, we expect each add operation to be linear, so the total time for $n$ adds should be quadratic. If so, the estimated slope of the line, on a log-log scale, should be near 2. Is it?


            Now let's compare that to the performance of `LinkedList`. Fill in the body of `profileLinkedListAddBeginning` [(Highlight)](open_file code/ProfileListAdd.java panel=2 ref="public static void profileLinkedListAddBeginning" count=1) and use it to classify `LinkedList.add` when we put the new element at the beginning. What performance do you expect? Are the results consistent with your expectations? 

            Finally, fill in the body of `profileLinkedListAddEnd` [(Highlight)](open_file code/ProfileListAdd.java panel=2 ref="public static void profileLinkedListAddEnd" count=1) and use it to classify `LinkedList.add` when we put the new element at the end. What performance do you expect? Are the results consistent with your expectations? 


            I'll present results and answer these questions in the next chapter.
  
          position: 2395
        - remove: 60
          position: 2396
    configuration:
      layout: 4-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/Profiler.java"
          panel: 0
          action: open
        - path: "code/ProfileListAdd.java"
          panel: 2
          action: open
        - path: "#preview: https://{{domain3000}}/"
          panel: 3
          action: open
# Chapter 5
  - name: Doubly-linked list
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Performance profiling results
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/ProfileListAdd.java"
          panel: 0
          action: open
  - name: Profiling \java{LinkedList} methods
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/ProfileListAdd.java"
          panel: 0
          action: open
  - name: Adding to the end of a \java{LinkedList}
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/ProfileListAdd.java"
          panel: 0
          action: open
  - name: Doubly-linked list
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Choosing a Structure
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 6
  - name: Tree traversal
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Search engines
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Parsing HTML
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Using jsoup
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Iterating through the DOM
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiNodeIterable.java"
          panel: 0
          action: open
  - name: Depth-first search
    type: section
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "#preview: https://en.wikipedia.org/wiki/Tree_traversal"
          panel: 0
          action: open
        - path: "#preview: https://en.wikipedia.org/wiki/Call_stack"
          panel: 1
          action: open
  - name: Stacks in Java
    type: section
    configuration:
      layout: 2-panels-guides-left
      files:
        - path: "#tabs"
          action: close
        - path: "#preview: https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html"
          panel: 1
          action: open
  - name: Iterative DFS
    type: section
    transformations:
        - remove: 20
          position: 3344
        - add:  |
              [Highlight in Code](open_file code/WikiNodeExample.java panel=0 ref="private static void iterativeDFS" count=23)
          position: 3343
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiNodeExample.java"
          panel: 0
          action: open
# Chapter 7
  - name: Getting to Philosophy
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Getting started
    type: section
    transformations:
        - remove: 3
          position: 3458
        - add:  |
        
            {Run Wiki Fetcher | terminal}(cd code && javac WikiFetcher.java && java -cp lib/*:. WikiFetcher && cd ../)
            
          position: 3457
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiNodeExample.java"
          panel: 0
          action: open
        - path: "code/WikiNodeIterable.java"
          panel: 0
          action: open
        - path: "code/WikiFetcher.java"
          panel: 0
          action: open
        - path: "code/WikiPhilosophy.java"
          panel: 0
          action: open
  - name: Iterables and Iterators
    type: section
    transformations:
        - remove: 15
          position: 3519
        - add:  |
             [Highlight in Code](open_file code/WikiNodeIterable.java panel=0 ref="public class WikiNodeIterable" count=13)
 
          position: 3518
        - remove: 31
          position: 3537
        - add:  |
             [Highlight in Code](open_file code/WikiNodeIterable.java panel=0 ref="private class WikiNodeIterator" count=38)
  
          position: 3536
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiNodeIterable.java"
          panel: 0
          action: open
  - name: WikiFetcher
    type: section
    transformations:
        - add:  |
             [Highlight in Code](open_file code/WikiFetcher.java panel=0 ref="public class WikiFetcher" count=75)
  
          position: 3629
        - remove: 40
          position: 3630
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiFetcher.java"
          panel: 0
          action: open
  - name: Exercise 5
    type: section
    transformations:
        - add:  |
              
              {Run | terminal}(javac code/WikiPhilosophy.java code/WikiFetcher.java && java -cp code WikiPhilosophy)
 
          position: 3771
    configuration:
      layout: 3-cell-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiPhilosophy.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
# Chapter 8
  - name: Indexer
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Data structure selection
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: TermCounter
    type: section
    transformations:
        - remove: 12
          position: 3930
        - add:  |
              [Highlight in Code](open_file code/TermCounter.java panel=0 ref="public class TermCounter" count=10)
 
          position: 3929
        - remove: 10
          position: 3958
        - add:  |
              [Highlight in Code](open_file code/TermCounter.java panel=0 ref="public void put" count=14)
 
          position: 3957
        - remove: 5
          position: 3984
        - add:  |
              [Highlight in Code](open_file code/TermCounter.java panel=0 ref="public void incrementTermCount" count=3)
 
          position: 3983
        - remove: 26
          position: 3998
        - add:  |
              [Highlight in Code](open_file code/TermCounter.java panel=0 ref="public void processElements" count=37)
 
          position: 3997
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/TermCounter.java"
          panel: 0
          action: open
  - name: Exercise 6
    type: section
    transformations:
        - remove: 9
          position: 4101
        - add: |
              {Run! | terminal}(cd code && javac WikiNodeIterable.java WikiFetcher.java TermCounter.java && java -cp lib/*:. TermCounter && cd ../)
              
              Use the button above to compile and run the source files. It should run the code from the previous section and print a list of terms and their counts. The output should look something like this: 
  
          position: 4100
        - remove: 2
          position: 4129
        - add:  |
              {Check It!|assessment}(test-4137955851)
 
          position: 4131
        - remove: 4
          position: 4230
        - add:  |
              {Run | terminal}(cd code && javac WikiNodeIterable.java WikiFetcher.java TermCounter.java Index.java && java -cp lib/*:. Index && cd ../)
              
              Use the button above to compile and run Index. It downloads two Wikipedia pages, indexes them, and prints the results; but when you run it you won't see any output because we've left one of the methods empty.
 
          position: 4229
        - remove: 2
          position: 4267
        - add:  |
              {Check It!|assessment}(test-1630193058)
 
          position: 4269
    configuration:
      layout: 3-cell-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/WikiNodeIterable.java"
          panel: 0
          action: open
        - path: "code/WikiFetcher.java"
          panel: 0
          action: open
        - path: "code/Index.java"
          panel: 0
          action: open
        - path: "code/TermCounterTest.java"
          panel: 0
          action: open
        - path: "code/TermCounter.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
# Chapter 9
  - name: The Map interface
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Implementing \java{MyLinearMap}
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyLinearMap.java"
          panel: 0
          action: open
  - name: Exercise 7
    type: section
    transformations:
        - remove: 8
          position: 4364
        - add:  |
              {Check It!|assessment}(test-27590314)
              
              Several tests should fail, because you have some work to do!
 
          position: 4372
    configuration:
      layout: 2-panels-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyLinearMap.java"
          panel: 0
          action: open
  - name: Analyzing MyLinearMap
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyLinearMap.java"
          panel: 0
          action: open
# Chapter 10
  - name: Hashing
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Hashing
    type: section
    transformations:
        - add:  |
              [Highlight in Code](open_file code/MyBetterMap.java panel=0 ref="public class MyBetterMap" count=23)
 
          position: 4581
        - remove: 17
          position: 4582
        - add:  |
              [Highlight in Code](open_file code/MyBetterMap.java panel=0 ref="protected MyLinearMap" count=4)
 
          position: 4642
        - remove: 9
          position: 4643
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyBetterMap.java"
          panel: 0
          action: open
  - name: How does hashing work?
    type: section
    transformations:
        - add:  |
              [Highlight in Code](open_file code/SillyString.java panel=0 ref="public class SillyString" count=9)
 
          position: 4717
        - remove: 12
          position: 4718
        - add:  |
              [Highlight in Code](open_file code/SillyString.java panel=0 ref="public boolean equals" count=13)
 
          position: 4734
        - remove: 15
          position: 4735
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/SillyString.java"
          panel: 0
          action: open
  - name: Hashing and mutation
    type: section
    transformations:
        - add:  |
              [Highlight in Code](open_file code/SillyArray.java panel=0 ref="public class SillyArray" count=24)
 
          position: 4814
        - remove: 27
          position: 4815
        - add:  |
              [Highlight in Code](open_file code/SillyArray.java panel=0 ref="public void setChar" count=3)
 
          position: 4847
        - remove: 6
          position: 4848
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/SillyArray.java"
          panel: 0
          action: open
  - name: Exercise 8
    type: section
    transformations:
        - add:  |
              
              {Check It!|assessment}(test-617588014)
              
              Several tests should fail, because you have some work to do!
 
          position: 4925
        - remove: 3
          position: 4926
    configuration:
      layout: 3-cell-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyBetterMap.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
# Chapter 11
  - name: HashMap
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 9
    type: section
    transformations:
        - add:  |
              [Highlight in Code](open_file code/MyHashMap.java panel=0 ref="public class MyHashMap" count=15)
 
          position: 4992
        - remove: 18
          position: 4993
        - add:  |
              
              {Check It!|assessment}(test-2138140034)
              
              It should fail because the implementation of `rehash` throws an exception. Your job is to fill it in.
 
          position: 5031
        - remove: 3
          position: 5032
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyHashMap.java"
          panel: 0
          action: open
        - path: "#terminal: "
          panel: 1
          action: open
  - name: Analyzing MyHashMap
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The tradeoffs
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Profiling MyHashMap
    type: section
    transformations:
        - add:  |
              {Run! | terminal}(cd code && javac Profiler.java ProfileMapPut.java && java -cp lib/*:. ProfileMapPut && cd ../ )
              
              It measures the runtime of `HashMap.put` (provided by Java) with a range of problem sizes, and plots runtime versus problem size on a log-log scale. If this operation is constant time, the total time for $n$ operations should be linear, so the result should be a straight line with slope 1. When I ran this code, the estimated slope was close to 1, which is consistent with our analysis. You should get something similar. 
 
          position: 5193
        - remove: 8
          position: 5194
    configuration:
      layout: 3-cell
      files:
        - path: "#tabs"
          action: close
        - path: "code/ProfileMapPut.java"
          panel: 0
          action: open
        - path: "#preview: https://{{domain3000}}/"
          panel: 1
          action: open
  - name: Fixing MyHashMap
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyFixedHashMap.java"
          panel: 0
          action: open
  - name: UML class diagrams
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 12
  - name: TreeMap
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: What's wrong with hashing?
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Binary search tree
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 10
    type: section
    transformations:
        - add:  |
              [Highlight in Code](open_file code/MyTreeMap.java panel=0 ref="public class MyTreeMap" count=4)
 
          position: 5651
        - remove: 6
          position: 5652
        - add:  |
              [Highlight in Code](open_file code/MyTreeMap.java panel=0 ref="protected class Node" count=16)
 
          position: 5666
        - remove: 13
          position: 5667
        - add:  |
              [Highlight in Code](open_file code/MyTreeMap.java panel=0 ref="public int size" count=9)
 
          position: 5690
        - remove: 10
          position: 5691
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
  - name: Implementing a TreeMap
    type: section
    transformations:
        - add:  |
              
              {Check It!|assessment}(test-1147894565)
              
              Several tests should fail, because you have some work to do!
 
          position: 5735
        - remove: 3
          position: 5736
        - add:  |
              
              [Highlight in Code](open_file code/MyTreeMap.java panel=0 ref="private Node findNode" count=13)
 
          position: 5745
        - remove: 13
          position: 5746
        - add:  |
                
                [Highlight in Code](open_file code/MyTreeMap.java panel=0 ref="public V put" count=17)
 
          position: 5813
        - remove: 17
          position: 5814
        - add:  |
              
              [Highlight in Code](open_file code/MyTreeMap.java panel=0 ref="public Set" count=5)
 
          position: 5877
        - remove: 7
          position: 5878
    configuration:
      layout: 2-panels-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
# Chapter 13
  - name: Binary search tree
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: A simple MyTreeMap
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
  - name: Searching for values
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
  - name: Implementing put
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
  - name: In-order traversal
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
  - name: The logarithmic methods
    type: section
    transformations:
        - add:  |
              
              [Put code in the main method](open_file code/MyTreeMap.java panel=0 ref="public static void main" count=1)
              
              {Run | terminal}(javac code/MyTreeMap.java && java -cp code MyTreeMap)
 
          position: 6261
        - add:  |
              
              [Put code in the `main` method](open_file code/MyTreeMap.java panel=0 ref="public static void main" count=1)
              
              {Run | terminal}(javac code/MyTreeMap.java && java -cp code MyTreeMap)
 
          position: 6314
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
  - name: Self-balancing trees
    type: section
    configuration:
      layout: 1-panel
      files:
        - path: "#tabs"
          action: close
  - name: One more exercise
    type: section
    configuration:
      layout: 2-panels
      files:
        - path: "#tabs"
          action: close
        - path: "code/MyTreeMap.java"
          panel: 0
          action: open
# Chapter 14
  - name: Persistence
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Redis
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Redis clients and servers
    type: section
    transformations:
        - remove: 53
          position: 6563
        - add:  |
              Redis is usually run as a remote service; in fact, the name stands for ``REmote DIctionary Server''. To use Redis, you have to run the Redis server somewhere and then connect to it using a Redis client. There are many ways to set up a server and many clients you could use.
 
          position: 6562
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Making a Redis-backed index
    type: section
    transformations:
        - remove: 61
          position: 6684
        - add:  |
              
              `JedisMaker` reads information about your Redis server from a file named `redis_url.txt`.
              
              Run the `JedisMaker` example code ([Highlight](open_file code/JedisMaker.java panel=0 ref="public static void main" count=27)) using the button below:
              
              {Run! | terminal}(cd code && javac JedisIndex.java JedisMaker.java WikiFetcher.java && java -cp lib/*:. JedisMaker && cd ../ )

 
          position: 6683
    configuration:
      layout: 2-panels-tree
      files:
          - path: "#tabs"
            action: close
          - path: "code/JedisMaker.java"
            panel: 0
            action: open
          - path: "code/JedisIndex.java"
            panel: 0
            action: open
  - name: Redis data types
    type: section
    transformations:
        - add:  |
              Redis is basically a map from keys, which are strings, to values, which can be one of several data types. The most basic Redis data type is a `string`.
 
          position: 6764
        - remove: 4
          position: 6765
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 11
    type: section
    transformations:
        - add:  |
              {Check It!|assessment}(test-3509169483)
              It should fail, because you have some work to do!
 
          position: 6886
        - remove: 2
          position: 6887
        - add:  |
              [Highlight in Code](open_file code/JedisIndex.java panel=0 ref="WikiFetcher" count=9)
              
              {Run! | terminal}(cd code && javac JedisIndex.java JedisMaker.java WikiFetcher.java && java -cp lib/*:. JedisIndex && cd ../ )
 
          position: 6912
        - remove: 11
          position: 6913
    configuration:
      layout: 2-panels-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/JedisIndex.java"
          panel: 0
          action: open
  - name: More suggestions if you want them
    type: section
    transformations:
        - add:  |
              {Run! | terminal}(cd code && javac JedisIndex.java JedisMaker.java WikiFetcher.java && java -cp lib/*:. JedisIndex && cd ../ )
              
              {Check It!|assessment}(test-3509169483)
 
          position: 7047
    configuration:
      layout: 2-panels-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/JedisIndex.java"
          panel: 0
          action: open
  - name: A few design hints
    type: section
    transformations:
        - add:  |
              {Run! | terminal}(cd code && javac JedisIndex.java JedisMaker.java WikiFetcher.java && java -cp lib/*:. JedisIndex && cd ../ )
              
              {Check It!|assessment}(test-3509169483)
 
          position: 7060
    configuration:
      layout: 2-panels-tree
      files:
        - path: "#tabs"
          action: close
        - path: "code/JedisIndex.java"
          panel: 0
          action: open
# Chapter 15
  - name: Crawling Wikipedia
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: The Redis-backed indexer
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Analysis of lookup
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Analysis of indexing
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Graph traversal
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 12
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 16
  - name: Boolean search
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Crawler solution
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Information retrieval
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
  - name: Boolean search
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 13
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Comparable and Comparator
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Extensions
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
# Chapter 17
  - name: Sorting
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Insertion sort
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 14
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Analysis of merge sort
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Radix sort
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Heap sort
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Bounded heap
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Space complexity
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
